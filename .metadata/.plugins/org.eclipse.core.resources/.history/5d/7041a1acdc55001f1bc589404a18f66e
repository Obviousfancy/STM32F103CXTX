/*
 * RCC.c
 *
 *  Created on: Aug 8, 2024
 *      Author: Obviousfancy
 */

#include "RCC.h"
void RCC_HSE_Config(void)
{
  /*
   * Configuration parameters(for Maximum Speed 72 MHz) --> STM32F103 Clock Tree
   *
   * HSE(High Speed External Oscilator) = 8 MHz
   * PLL_Mul(Multiplexor PLL) = 9
   * USB Preescaler = 1
   * AHB Preescaler = 1
   * Cortex Preescaler(To Cortex System Timer) = 1
   * -->72 MHz System Clock
   *
   * APB1 preescaler = 2 --> 36 Mhz Peripheral Clocks,72 MHz Timer Clocks
   * APB2 preescaler = 1 --> 72 MHz for Peripheral and Timer Clocks
   * ADC Preescaler = 6 --> 12 Mhz
   */

  //PLL Configurations
  //PLL_Mul = 9(Page 102 Reference Manual)
  RCC->CFGR &= ~(0xFUL << 18);    //Clear bitfields [21-18]   basicamente ponemos en cero los bits del 18 asignandole a CFGR, recorriendolo 18 espacios, e invirtiendo los 1111 a ceros
  //RCC->CFGR &= ~(RCC_CFGR_PLLMULL);
  RCC->CFGR |= (7UL << 18);       //Asignamos 0111 a el multiplicador, con 7 hexadecimal que es 0111 con un or para cambiarlo de 0 a 1
  //USB PREESCALER TO 1.5
  RCC->CFGR &= ~(1UL << 22);      //Limpiamos a ceros el registro de el USB preescaler inviertiendo a cero el bit 22 del registro
  //RCC->CFGR &= ~(RCC_CFGR_USBPRE);    //Lo mismo de arriba pero dado por el fabricante (0x1UL << (22U))
  //RCC->CFGR |= (1UL << 22);             //

  /*HSE Oscillator*/
  //Enable HSE Oscillator (Page 99 of Reference Manual)
  RCC->CR |= (1UL << 16);                 //Encendemos el HSE oscillator
  //RCC->CR |= (RCC_CR_HSEON);              //Lo mismo pero con macros de stm32
  //Wait for it stabilize
  while(RCC->CR & (1UL <<17) == 0){};          //Esperamos a que el CR tenga informacion y que el HSE este listo
  //while(RCC->CR & RCC_CR_HSERDY == 0){};     //Lo mismo pero con macros



}
